FORMAT: 1A
HOST: http://dataport.triled.be/

# TriLED dataport
API Definition of the TriLED dataport. The API adherse the RESTful principles. 

## Dect and SMALI
There 2 main components covered by this API:
* DECT: mainly used execute commando's on access points & devices
* SMALI: mainly used to check state of the network & set variables

## Requirements
* have an overview of what's available on a dataport (config, access points, nodes, etc.)
* read variables (nvi, nvo, nci)
* write variables (nvi, nci)
* It must be possible to change the power state of an access point: on/off
* change the registration mode state of an access point: on/off
* change the registration mode state of a node: on/off
* upgrade firmware of nodes
* query for a list of Access Points
* query for a list of Nodes

# Group General
## Index [/v1/]
### Do request [GET]

+ Response 200 (application/json)

        {
            "msg": "Hello World"
        }


# Group SMALI Nodes
## Nodes List [/v1/network/nodes/]
### Overview [GET]
Get Node list.

+ Response 200

        {
            "count": 4,
            "results": [
                {
                    "id": "00-01-02-03-04-05",
                    "node_type": "power_supply",
                    "device_type": "ip",
                    "name": "PS-100",
                    "objects": [
                        {
                            "name": "Config",
                            "nvo": [],
                            "nvi": [],
                            "nci": [
                                {
                                    "name": "Mac",
                                    "format": "6,0,0,0,0,0,-",
                                    "value": "0x000000000000"
                                }
                            ]
                        },
                        {
                            "name": "EnergyMeter",
                            "nvo": [
                                {
                                    "name": "Calibrate",
                                    "format": "6,0,0,0,0,0,-",
                                    "value": "0x000102030405"
                                }
                            ],
                            "nvi": [],
                            "nci": []
                        },
                        {
                            "name": "Power",
                            "nvo": [
                            ],
                            "nvi": [
                                {
                                    "name": "Output",
                                    "format": "1,1,0,0,0,1,-",
                                    "value": "0x00"
                                },
                                {
                                    "name": "Voltage",
                                    "format": "2,1,0,0,0,400,V",
                                    "value": "0x0001"
                                },
                                {
                                    "name": "Current",
                                    "format": "2,1,-1,0,0,5,A",
                                    "value": "0x0001"
                                }
                            ],
                            "nci": []
                        }
                    ]
                },
                {
                    "id": "00-01-02-03-04-06",
                    "node_type": "power_supply",
                    "device_type": "ip",
                    "name": "PS-101",
                    "objects": [
                        {
                            "name": "Config",
                            "nvo": [],
                            "nvi": [],
                            "nci": [
                                {
                                    "name": "Mac",
                                    "format": "6,0,0,0,0,0,-",
                                    "value": "0x000000000000"
                                }
                            ]
                        },
                        {
                            "name": "EnergyMeter",
                            "nvo": [
                                {
                                    "name": "Calibrate",
                                    "format": "6,0,0,0,0,0,-",
                                    "value": "0x000102030405"
                                }
                            ],
                            "nvi": [],
                            "nci": []
                        },
                        {
                            "name": "Power",
                            "nvo": [
                            ],
                            "nvi": [
                                {
                                    "name": "Output",
                                    "format": "1,1,0,0,0,1,-",
                                    "value": "0x01"
                                },
                                {
                                    "name": "Voltage",
                                    "format": "2,1,0,0,0,400,V",
                                    "value": "0x0001"
                                },
                                {
                                    "name": "Current",
                                    "format": "2,1,-1,0,0,5,A",
                                    "value": "0x0001"
                                }
                            ],
                            "nci": []
                        }
                    ]
                },
                {
                    "id": "00-01-02-03-04-06",
                    "node_type": "dualline",
                    "device_type": "dect",
                    "name": "Dual Line 2",
                    "objects": [
                        {
                            "name": "Channel 1",
                            "nvo": [],
                            "nvi": [],
                            "nci": []
                        }
                    ]
                },
                {
                    "id": "05-04-03-02-01-00",
                    "node_type": "temperature_sensor",
                    "device_type": "dect",
                    "name": "Temperature Sensor 1",
                    "objects": [
                        {
                            "name": "Channel 2",
                            "nvo": [],
                            "nvi": [],
                            "nci": []
                        }
                    ]
                }
            ]
        }

### Update [PUT]
Update the variables (nvi, nvo, nci) of a Nodes. It accepts a list of a paths to a 
variable and their new value. The response returns the same list but with a `status_code`
field. Still to be defined which statussen we'll have.

Path construction: \<nodeId\>/\<objectName\>/\<variableName\>

+ Request (application/json)

        {
            "updates": [
                {
                    "path": "00-01-02-03-04-05/Channel 1/nviName",
                    "value": "val1"
                },
                {
                    "path": "00-01-02-03-04-05/Channel 1/nciValue2",
                    "value": "val2"
                }
            ] 
        }

+ Response 200 (application/json)

        {
            "updates": [
                {
                    "path": "00-01-02-03-04-05/Channel 1/nviName",
                    "status_code": "ok"
                },
                {
                    "path": "00-01-02-03-04-05/Channel 1/nciValue2",
                    "status_code": "offline"
                }  
            ]
        }

## Node Details [/v1/network/nodes/{nodeId}/]
Get details about a specific node. A node is a group of LED lights.

+ Parameters
    + nodeId (required, string, `00-01-02-03-04-05`) ... unique id of a node

+ Model (application/json)

        {
            "id": "00-01-02-03-04-06",
            "node_type": "dualline",
            "device_type": "dect",
            "name": "Dual Line 2",
            "objects": [
                {
                    "name": "Channel 1",
                    "nvo": [
                        {
                            "name": "nvoName",
                            "format": "format",
                            "value": "value"
                        },
                        {
                            "name": "nvoTemp",
                            "format": "2,1,0,-274,-20,120,Â°C",
                            "value": "23"
                        },
                        {
                            "name": "nvoVolt",
                            "format": "2,1,-2,0,0,10,V",
                            "value": "230"
                        }
                    ],
                    "nvi": [
                        {
                            "name": "nviName",
                            "format": "2,1,0,0,0,100,%",
                            "value": "value"
                        }
                    ],
                    "nci": [
                        {
                            "name": "nciName",
                            "format": "format",
                            "value": "value"
                        },
                        {
                            "name": "nciDimTime",
                            "format": "2,1,0,0,0,100,s",
                            "value": "10"
                        }
                    ]
                }
            ]
        }
        
### Details [GET]
Get details about a specific node. A node is a group of LED lights.

+ Attributes
    + id: "00-01-02-03-04-05" (string, required) ... unique id of a node
    + type: "power_supply" (string, required) ... type of the node, can be anything
    + device_type: "ip" (string, required) ... type of the device: ip or dect
    + name: "AC 10.0.0.1" (string, required) ... human readable name for the node
    + objects (array, required) - list of available objects on the access point

+ Response 200 
    
    [Node Details][]

### Send Commando [POST]
You can send commandos to a SMALI dect node. For now only `UPGRADE_FIRMWARE`. 

+ Request (application/json)

        {
            "command": "UPGRADE_FIRMWARE",
            "paramters": [
                "firmware_v1.1.bin"
            ]
        }
        
+ Response 200 (application/json)

        {
        }



# Group DECT Access Points
Get details about dect access points, their `power` & `registration_mode` state. It's possible to change these states.

## Access Points List [/v1/dect/accesspoints/]
+ Model (application/json)

        {
            "count": 3,
            "results": [
                {
                    "name": "AP-100",
                    "mode": "EU",
                    "version": "0x1180",
                    "registration_mode": false,
                    "clients": [
                        {
                            "terminal_id": "7",
                            "name": "AP-103-7",
                            "ipui": "44:f2:30:60:43"
                        },
                        {
                            "terminal_id": "8",
                            "name": "AP-103-8",
                            "ipui": "44:f2:31:70:43"
                        }
                    ]
                },
                {
                    "name": "AP-101",
                    "mode": "EU",
                    "version": "0x1180",
                    "registration_mode": true,
                    "clients": []
                },
                {
                    "name": "AP-102",
                    "mode": "EU",
                    "version": "0x1180",
                    "registration_mode": false,
                    "clients": []
                }
            ]
        }

### Overview [GET]
+ Attributes
    + id: "00-01-02-03-04-05" (string, required) - unique id of the access point
    + registration_mode: off (string, required) - is the unit in registration mode or not
    + clients (array, required) - list of devices connected to an access point

+ Response 200

    [Access Points List][]
    

## Access Point Details [/v1/dect/accesspoints/{accessPointId}/]
A single access point object with all its details.

+ Parameters
    + accessPointId (required, string, `00-01-02-03-04-05`) ... unique id of a access point

### Details [GET]
+ Attributes
    + id: "00-01-02-03-04-05" (string, required) - unique id of the access point
    + registration_mode: off (string, required) - is the unit in registration mode or not

+ Response 200

        {
            "name": "AP-100",
            "mode": "EU",
            "version": "0x1180",
            "registration_mode": true,
            "clients": []
        }

### Send Commando [POST]
You can send commandos to a dect access point: `DELETE_REGISTRATION` or `SET_REGISTRATION_MODE`.

+ Request (application/json)

        {
            "command": "DELETE_REGISTRATION",
            "paramters": [1]
        }
        
+ Response 200 (application/json)

        {
            "name": "AP-100",
            "mode": "EU",
            "version": "0x1180",
            "registration_mode": false,
            "clients": []
        }


# Group DECT Clients
## Device Details [/v1/dect/accesspoints/{accessPointId}/clients/{clientId}/]
Fetch details about a device, the state of the `registration_mode` & installed firmware.

+ Parameters
    + accessPointId (required, string, `00-01-02-03-04-05`) ... unique id of an access point
    + clientId (required, string, `00-01-02-03-04-05`) ... unique id of the device

### Details [GET]
+ Attributes
    + id: "00-01-02-03-04-05" (string, required) - unique id of the access point
    + firmware: "firmware_v1.0.bin" (string, required) ... the firmware installed on the node
    + registration_mode: off (string, required) - is the unit in registration mode or not

+ Response 200 (application/json)

        {
            "id": "00-01-02-03-04-05",
            "firmware": "firmware_v1.0.bin",
            "registration_mode": "on"
        }

### Update [PUT]
+ Request ChangeRegistrationModeOn (application/json)

        {
            "registration_mode": "on"
        }
        
+ Response 200 (application/json)

        {
            "id": "00-01-02-03-04-05",
            "firmware": "firmware_v1.0.bin",
            "registration_mode": "on"
        }
        
+ Request ChangeRegistrationModeOff (application/json)

        {
            "registration_mode": "off"
        }
        
+ Response 200 (application/json)

        {
            "id": "00-01-02-03-04-05",
            "firmware": "firmware_v1.0.bin",
            "registration_mode": "off"
        }

## Firmware [/v1/dect/accesspoint/{accessPointId}/clients/{clientId}/firmware/]
Put a json body with the firmware filename to the device you want to upgrade.
This is an asynchronous process, the server responds with a 202 (Accepted) status code 
which means that it will start upgrade a device.
If the firmware is not available to server will respond with a 400 status code. 
You'll have to upload the new firmware first, cfr: `POST /v1/dec/firmwares/`

+ Parameters
    + accessPointId (required, string, `00-01-02-03-04-05`) ... unique id of an access point
    + clientId (required, string, `00-01-02-03-04-05`) ... unique id of the device

### Details & status [GET]
+ Attributes
    + status: "installing" (string, required) - when the firmware is being upgraded it has 5 different states

+ Response 200 (application/json)

        {
            "status": "installed",
            "firmware": "firmware_v1.1.bin"
        }

### Upgrade [PUT]
+ Request (application/json)
    
        {
            "status": "installing",
            "firmware": "firmware_v1.1.bin"
        }

+ Response 200 

    [Node Details][]
    
+ Response 400 (application/json)

        {
            "error": "firmware_unavailable"
        }


# Group DECT Tasks

## Tasks [/v1/dect/tasks/]
Tasks are used to send commands to Access Points. In the future these 
tasks will be executed asynchronously. The response is 202 (Accepted) with
a link to the task. Clients can poll this link to get updates about the task.

Check the cookbook for async tasks: http://restcookbook.com/Resources/asynchroneous-operations/

### Exec Command [POST]

+ Request (application/json)

        {
            "name": "AP-100",
            "command": "SENT_DSDS",
            "parameters": [1,2,3]
        }
        
+ Response 202

    + Headers 
    
            Location: /v1/tasks/1234

## Task [/v1/dect/tasks/{taskId}/]
### Details [GET]

+ Response 200 (application/json)

        {
            "name": "AP-100",
            "command": "SENT_DSDS",
            "parameters": [1,2,3]
            "status":"busy"
        }


# Group DECT Firmwares
Get an overview of available firmware on the dataport. 
By posting a binary to this URI you'll be able to make new firmware available for devices.

## Firmwares List [/v1/dect/firmwares/]
### Overview [GET]
+ Response 200 (application/json)

        {
            "count": 2,
            "results": [
                "firmware_v1.0.bin",
                "firmware_v1.1.bin"
            ]
        }

### Upload [POST]
+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="file"; filename="firmware_v1.1.bin"
        Content-Type: application/octet-stream
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ Response 201 (application/json)

        {
            "file": "firmware_v1.1.bin"   
        }



