FORMAT: 1A
HOST: http://dataport.triled.be/

# TriLED dataport

API Definition of the TriLED dataport. The API adherse the RESTful principles. There 2 main components covered by this API:
* DECT: mainly used execute commando's on access points & devices
* SMALI: mainly used to check state of the network & set variables

Requirements:
* have an overview of what's available on a dataport (config, access points, nodes, etc.)
* read variables (nvi, nvo, nci)
* write variables (nvi, nci)
* It must be possible to change the power state of an access point: on/off
* change the registration mode state of an access point: on/off
* change the registration mode state of a node: on/off
* upgrade firmware of nodes
* query for a list of Access Points
* query for a list of Nodes

# Group General
## Index [/v1/]
### Do request [GET]

+ Response 200 (application/json)

        {
            "msg": "Hello World"
        }

# Group Access Points
    
## List Access Points [/v1/network/accesspoints/]
Returns a list of access points.

### Overview [GET]

+ Response 200 (application/json)

        {
            "count": 1,
            "results": [
                {
                    "id": "00-01-02-03-04-05",
                    "state_power": "on",
                    "state_registration_mode": "off",
                    "objects": [
                        {
                            "name": "Config",
                            "variables": [
                                {
                                  "type": "nci",
                                  "name": "Mac",
                                  "value": "00-01-02-03-04-05"
                                }
                            ],
                            "configurations": [
                                {
                                  "type": "nci",
                                  "name": "Mac",
                                  "format": ""
                                }
                            ]
                        },
                        {
                            "name": "EnergyMeter",
                            "variables": [
                                {
                                  "type": "nvi",
                                  "name": "Calibrate",
                                  "value": ""
                                }
                            ],
                            "configurations": [
                                {
                                  "type": "nvi",
                                  "name": "Calibrate",
                                  "format": ""
                                }
                            ]
                        },
                        {
                            "name": "Power",
                            "variables": [
                                {
                                  "type": "nvi",
                                  "name": "Output",
                                  "value": true
                                },
                                {
                                  "type": "nvo",
                                  "name": "Voltage",
                                  "value": "210"
                                },
                                {
                                  "type": "nvo",
                                  "name": "Current",
                                  "value": "5"
                                }
                              ],
                              "configurations": [
                                {
                                  "type": "nvi",
                                  "name": "Output",
                                  "format": ""
                                },
                                {
                                  "type": "nvo",
                                  "name": "Voltage",
                                  "format": "2,1,-2,0,0,10,V"
                                },
                                {
                                  "type": "nvo",
                                  "name": "Current",
                                  "format": "2,1,-2,0,0,10,V"
                                }
                            ]
                        }
                    ]
                }
            ]
        }

### Bulk update [POST]
+ Request (application/json)

        [
            {"id": "00-01-02-03-04-05", "state_power": "off"},
            {"id": "00-01-02-03-04-06", "state_registration_mode": "off"},
            {"id": "00-01-02-03-04-07", "state_registration_mode": "on"},
            {"id": "00-01-02-03-04-08", "state_power": "on"}
        ]
        
+ Response 200 (application/json)

        {}

## Access Point Details [/v1/network/accesspoints/{accessPointId}/]
A single access point object with all its details.

+ Parameters
    + accessPointId (required, string, `00-01-02-03-04-05`) ... unique id of a access point

+ Model (application/json)

        {
            "id": "00-01-02-03-04-05",
            "state_power": "on",
            "state_registration_mode": "off",
            "objects": [
                {
                    "name": "Config",
                    "variables": [
                        {
                            "type": "nci",
                            "name": "Mac",
                            "value": "00-01-02-03-04-05"
                        }
                    ],
                    "configurations": [
                        {
                            "type": "nci",
                            "name": "Mac",
                            "format": ""
                        }
                    ]
                },
                {
                    "name": "EnergyMeter",
                    "variables": [
                        {
                            "type": "nvi",
                            "name": "Calibrate",
                            "value": ""
                        }
                    ],
                    "configurations": [
                        {
                            "type": "nvi",
                            "name": "Calibrate",
                            "format": ""
                        }
                    ]
                },
                {
                    "name": "Power",
                    "variables": [
                        {
                          "type": "nvi",
                          "name": "Output",
                          "value": true
                        },
                        {
                          "type": "nvo",
                          "name": "Voltage",
                          "value": "210"
                        },
                        {
                          "type": "nvo",
                          "name": "Current",
                          "value": "5"
                        }
                    ],
                    "configurations": [
                        {
                          "type": "nvi",
                          "name": "Output",
                          "format": ""
                        },
                        {
                          "type": "nvo",
                          "name": "Voltage",
                          "format": "2,1,-2,0,0,10,V"
                        },
                        {
                          "type": "nvo",
                          "name": "Current",
                          "format": "2,1,-2,0,0,10,V"
                        }
                    ]
                }
            ]
        }

### Access point Details [GET]
+ Attributes
    + id: "00-01-02-03-04-05" (string, required) - unique id of the access point
    + state_power: on (string, required) - state of the power, on/off
    + state_registration_mode: off (string, required) - is the unit in registration mode or not
    + config (object, required) - Info about the unit configuration
    + energy_meter (object, required) - Stats about the energy meter
    + power (object, required) - Stats about the power state
        
+ Response 200

    [Access Point Details][]
    
### Change states [PUT]
You can change the state of the `power` and the `registration_mode` of an access point. 

+ Request ChangeStatePower (application/json)

        {
            "state_power": "off"
        }
        
+ Response 200

    [Access Point Details][]

+ Request ChangeStateRegistrationMode (application/json)

        {
            "state_registration_mode": "on"
        }
        
+ Response 200

    [Access Point Details][]

# Group Nodes
## List Nodes [/v1/network/accesspoints/{accessPointId}/nodes/]
### Overview [GET]
+ Response 200

        {
            "count": 2,
            "results": [
                {
                    "id": "00-01-02-03-04-05",
                    "firmware": "firmware_v1.1.bin",
                    "objects": [
                    ]
                },
                {
                }
            ]
        }

## Node Details [/v1/network/accesspoints/{accessPointId}/nodes/{nodeId}/]
Get details about a specific node & upgrade its firmware. A node is a group of LED lights.

+ Parameters
    + accessPointId (required, string, `00-01-02-03-04-05`) ... unique id of a access point
    + nodeId (required, string, `00-01-02-03-04-05`) ... unique id of a node

+ Model (application/json)

        {
            "id": "00-01-02-03-04-05",
            "firmware": "firmware_v1.1.bin",
            "objects": [
            ]
        }
        
### Node Details [GET]
+ Response 200 
    
    [Node Details][]


    
# Group Firmwares
Get an overview of available firmware on the dataport. 
By posting a binary to this URI you'll be able to make new firmware available for devices.

## List Firmwares [/v1/dect/firmwares/]
### Overview [GET]
+ Response 200 (application/json)

        {
            "count": 2,
            "results": [
                "firmware_v1.0.bin",
                "firmware_v1.1.bin"
            ]
        }

### Upload [POST]
+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="file"; filename="firmware_v1.1.bin"
        Content-Type: application/octet-stream
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ Response 201 (application/json)

        {
            "file": "firmware_v1.1.bin"   
        }
        

## Device Firmware [/v1/dect/accesspoint/{accessPointId}/devices/{deviceId}/firmware/]
Put a json body with the firmware filename to the device you want to upgrade.
This is an asynchronous process, the server responds with a 202 (Accepted) status code 
which means that it will start upgrade a device.
If the firmware is not available to server will respond with a 400 status code. 
You'll have to upload the new firmware first, cfr: `POST /v1/dec/firmwares/`

+ Parameters
    + accessPointId (required, string, `00-01-02-03-04-05`) ... unique id of an access point
    + deviceId (required, string, `00-01-02-03-04-05`) ... unique id of the device

### Firmware Details & status [GET]
+ Attributes
    + status: "installind" (string, required) - when the firmware is being upgraded it has 5 different states

+ Response 200 (application/json)

        {
            "status": "installed",
            "firmware": "firmware_v1.1.bin"
        }

### Upgrade Firmware [PUT]
+ Request (application/json)
    
        {
            "status": "installing",
            "firmware": "firmware_v1.1.bin"
        }

+ Response 200 

    [Node Details][]
    
+ Response 400 (application/json)

        {
            "error": "firmware_unavailable"
        }








